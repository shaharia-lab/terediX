package scanner

import (
	"testing"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/shaharia-lab/teredix/pkg/util"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// RdsClient is an autogenerated mock type for the RdsClient type
type RdsClientMock struct {
	mock.Mock
}

// DescribeDBInstancesPages provides a mock function with given fields: _a0, _a1
func (_m *RdsClientMock) DescribeDBInstancesPages(_a0 *rds.DescribeDBInstancesInput, _a1 func(*rds.DescribeDBInstancesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rds.DescribeDBInstancesInput, func(*rds.DescribeDBInstancesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *RdsClientMock) ListTagsForResource(_a0 *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *rds.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*rds.ListTagsForResourceInput) *rds.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*rds.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func TestAWSRDS_Scan(t *testing.T) {
	testCases := []struct {
		name                  string
		sourceFields          []string
		rdsInstances          []*rds.DBInstance
		expectedTotalResource int
		expectedMetaDataKeys  []string
	}{
		{
			name: "successfully list RDS instances and map resources",
			sourceFields: []string{
				rdsFieldInstanceID,
				rdsFieldTags,
				rdsFieldARN,
				rdsFieldRegion,
			},
			rdsInstances: []*rds.DBInstance{
				{DBInstanceIdentifier: aws.String("instance1"), TagList: []*rds.Tag{{Key: aws.String("Environment"), Value: aws.String("Production")}}},
				{DBInstanceIdentifier: aws.String("instance2"), TagList: []*rds.Tag{{Key: aws.String("Environment"), Value: aws.String("Production")}}},
			},
			expectedTotalResource: 2,
			expectedMetaDataKeys: []string{
				rdsFieldInstanceID,
				"tag_Environment",
				rdsFieldARN,
				rdsFieldRegion,
			},
		},
	}
	for _, tt := range testCases {
		t.Run(tt.name, func(t *testing.T) {
			rdsClientMock := new(RdsClientMock)
			rdsClientMock.On("DescribeDBInstancesPages", mock.Anything, mock.Anything).Return(nil).Run(func(args mock.Arguments) {
				fn := args.Get(1).(func(*rds.DescribeDBInstancesOutput, bool) bool)
				for _, rdsInstance := range tt.rdsInstances {
					fn(&rds.DescribeDBInstancesOutput{DBInstances: []*rds.DBInstance{rdsInstance}}, false)
				}
			})
			res := RunScannerForTests(NewAWSRDS("source-name", "us-east-1", "123456789012", rdsClientMock, []string{rdsFieldInstanceID, rdsFieldTags, rdsFieldARN, rdsFieldRegion}))

			assert.Equal(t, tt.expectedTotalResource, len(res))
			util.CheckIfMetaKeysExistsInResources(t, res, tt.expectedMetaDataKeys)
		})
	}
}
