// Package scanner scans targets
package scanner

import (
	"github.com/shaharia-lab/teredix/pkg/config"
	"github.com/shaharia-lab/teredix/pkg/resource"
	"github.com/stretchr/testify/mock"
)

// Mock is an autogenerated mock type for the ScannerMock type
type Mock struct {
	mock.Mock
}

// GetKind provides a mock function with given fields:
func (_m *Mock) GetKind() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Mock) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSchedule provides a mock function with given fields:
func (_m *Mock) GetSchedule() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Scan provides a mock function with given fields: resourceChannel
func (_m *Mock) Scan(resourceChannel chan resource.Resource) error {
	ret := _m.Called(resourceChannel)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan resource.Resource) error); ok {
		r0 = rf(resourceChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: name, cfg, dependencies
func (_m *Mock) Setup(name string, cfg config.Source, dependencies *Dependencies) error {
	ret := _m.Called(name, cfg, dependencies)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, config.Source, *Dependencies) error); ok {
		r0 = rf(name, cfg, dependencies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
